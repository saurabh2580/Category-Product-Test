package com.api.nimapinfotechTest.service.imp;

import com.api.nimapinfotechTest.model.Category;
import com.api.nimapinfotechTest.repository.CategoryRepository;
import com.api.nimapinfotechTest.service.CategoryServiceIn;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CategoryService implements CategoryServiceIn {

	@Autowired
	private CategoryRepository categoryRepository;

	@Override
	public List<Category> getAllCategories() {
		return categoryRepository.findAll();
	}

	@Override
	public Category getCategoryById(Long categoryId) throws NotFoundException {
		Optional<Category> category = categoryRepository.findById(categoryId);
		if (category.isPresent()) {
			return category.get();
		} else {
			throw new NotFoundException();
		}
	}

	@Override
	public Category createCategory(Category category) {
		return categoryRepository.save(category);
	}

	@Override
	public Category updateCategory(Long categoryId, Category categoryDetails) throws NotFoundException {
		Optional<Category> optionalCategory = categoryRepository.findById(categoryId);
		if (optionalCategory.isPresent()) {
			Category category = optionalCategory.get();
			category.setName(categoryDetails.getName());
			category.setAbout(categoryDetails.getAbout());
			return categoryRepository.save(category);
		} else {
			throw new NotFoundException();
		}
	}

	@Override
	public void deleteCategory(Long categoryId) throws NotFoundException {
		Optional<Category> optionalCategory = categoryRepository.findById(categoryId);
		if (optionalCategory.isPresent()) {
			Category category = optionalCategory.get();
			categoryRepository.delete(category);
		} else {
			throw new NotFoundException();
		}
	}

}
