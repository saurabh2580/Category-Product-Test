package com.api.nimapinfotechTest.controller;

import com.api.nimapinfotechTest.model.dto.ProductDTO;
import com.api.nimapinfotechTest.service.ProductService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.crossstore.ChangeSetPersister.NotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/products")
public class ProductController {

	@Autowired
	private ProductService productService;

	@GetMapping
	public ResponseEntity<List<ProductDTO>> getAllProducts() {
		List<ProductDTO> products = productService.getAllProducts();
		return new ResponseEntity<>(products, HttpStatus.OK);
	}

	@GetMapping("/{id}")
	public ResponseEntity<ProductDTO> getProductById(@PathVariable("id") Integer productId) throws NotFoundException {
		ProductDTO product = productService.getProductById(productId);
		return new ResponseEntity<>(product, HttpStatus.OK);
	}

	@PostMapping
	public ResponseEntity<ProductDTO> createProduct(@RequestBody ProductDTO product) throws NotFoundException {
		ProductDTO createdProduct = productService.createProduct(product);
		return new ResponseEntity<>(createdProduct, HttpStatus.CREATED);
	}

	@PutMapping("/{id}")
	public ResponseEntity<ProductDTO> updateProduct(@PathVariable("id") Integer productId,
			@RequestBody ProductDTO productDetails) throws NotFoundException {
		ProductDTO updatedProduct = productService.updateProduct(productId, productDetails);
		return new ResponseEntity<>(updatedProduct, HttpStatus.OK);
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteProduct(@PathVariable("id") Integer productId) throws NotFoundException {
		productService.deleteProduct(productId);
		return new ResponseEntity<>(HttpStatus.NO_CONTENT);
	}
	//pagination
	@GetMapping("/{offset}/{pageSize")
	public ResponseEntity<Page<Product>> productwithPage(@PathVariable int offset, @PathVariable int pageSize) {
		Page<Product> list = this.productService.productwithPage(offset, pageSize);
		return new ResponseEntity<Page<Product>>(list,HttpStatus.OK);
	}
}
